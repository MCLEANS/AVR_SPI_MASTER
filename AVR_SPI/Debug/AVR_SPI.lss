
AVR_SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000112  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000766  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c9  00000000  00000000  0000098a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00001053  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f1  00000000  00000000  00001340  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000006c  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000179d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  8e:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z15init_spi_masterv>:
#define SS_PIN PINB6

void init_spi_master(){
	
	//set MOSI AND SCK to output
	MOSI_PORT_DIRECTION |= (1<<MOSI_PIN);
  96:	25 9a       	sbi	0x04, 5	; 4
	SCLK_PORT_DIRECTION |= (1<<SCLK_PIN);
  98:	23 9a       	sbi	0x04, 3	; 4
	//Enable master mode
	//set clock frequency to fosc/16
	//Enable the SPI
	SPCR |= (1<<MSTR)|(1<<SPR0)|(1<<SPE);
  9a:	8c b5       	in	r24, 0x2c	; 44
  9c:	81 65       	ori	r24, 0x51	; 81
  9e:	8c bd       	out	0x2c, r24	; 44
  a0:	08 95       	ret

000000a2 <main>:
	
}


int main(void)
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	00 d0       	rcall	.+0      	; 0xa8 <main+0x6>
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x8>
  aa:	1f 92       	push	r1
  ac:	cd b7       	in	r28, 0x3d	; 61
  ae:	de b7       	in	r29, 0x3e	; 62
    /* Replace with your application code */
	init_spi_master();
  b0:	0e 94 4b 00 	call	0x96	; 0x96 <_Z15init_spi_masterv>
	DDRD = 0b11111111;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0b11111111;
  b8:	87 b9       	out	0x07, r24	; 7
	SS_PORT_DIRECTION |= (1<<SS_PIN);
  ba:	26 9a       	sbi	0x04, 6	; 4
	
	char sent_bytes[5] = {0b10000000,
							0b00110011,
							0b00000000,
							0b11111111,
							0b11100011};
  bc:	85 e0       	ldi	r24, 0x05	; 5
  be:	e0 e0       	ldi	r30, 0x00	; 0
  c0:	f1 e0       	ldi	r31, 0x01	; 1
  c2:	de 01       	movw	r26, r28
  c4:	11 96       	adiw	r26, 0x01	; 1
  c6:	01 90       	ld	r0, Z+
  c8:	0d 92       	st	X+, r0
  ca:	8a 95       	dec	r24
  cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x24>
	
	int i = 0;	
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
	while (1)
	{
		SS_PORT &= ~(1<<SS_PIN);
  d2:	2e 98       	cbi	0x05, 6	; 5
		PORTD = SPDR = sent_bytes[i];
  d4:	e1 e0       	ldi	r30, 0x01	; 1
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	ec 0f       	add	r30, r28
  da:	fd 1f       	adc	r31, r29
  dc:	e8 0f       	add	r30, r24
  de:	f9 1f       	adc	r31, r25
  e0:	20 81       	ld	r18, Z
  e2:	2e bd       	out	0x2e, r18	; 46
  e4:	2b b9       	out	0x0b, r18	; 11
		while(!(SPSR & (1<< SPIF)));
  e6:	0d b4       	in	r0, 0x2d	; 45
  e8:	07 fe       	sbrs	r0, 7
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <main+0x44>
		SS_PORT |=(1<<SS_PIN);
  ec:	2e 9a       	sbi	0x05, 6	; 5
		i++;
  ee:	01 96       	adiw	r24, 0x01	; 1
		if(i > 4) i=0;
  f0:	85 30       	cpi	r24, 0x05	; 5
  f2:	91 05       	cpc	r25, r1
  f4:	14 f0       	brlt	.+4      	; 0xfa <main+0x58>
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	39 e6       	ldi	r19, 0x69	; 105
  fe:	48 e1       	ldi	r20, 0x18	; 24
 100:	21 50       	subi	r18, 0x01	; 1
 102:	30 40       	sbci	r19, 0x00	; 0
 104:	40 40       	sbci	r20, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <main+0x5e>
 108:	00 c0       	rjmp	.+0      	; 0x10a <main+0x68>
 10a:	00 00       	nop
 10c:	e2 cf       	rjmp	.-60     	; 0xd2 <main+0x30>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
